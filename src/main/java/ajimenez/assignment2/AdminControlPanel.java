/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ajimenez.assignment2;

import java.awt.Component;
import java.util.Stack;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author notwj
 */
public class AdminControlPanel extends javax.swing.JFrame {
    private DataStore data;
    private UserEntity selectedUser;
    
    /**
     * Creates new form AdminControlPanel
     */
    
    private AdminControlPanel() {
        initComponents();
        System.err.println("Please run from Driver.java.");
    }
    
    public AdminControlPanel(DataStore data) {
        initComponents();
        this.data = data;
        
        // set root as defaulted selected user/group
        UserTree.setSelectionPath(new TreePath(data.getRoot().getId()));
        updateTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CreateUserTypeButtonGroup = new javax.swing.ButtonGroup();
        StatisticsOutput = new javax.swing.JTextField();
        ShowUserTotalButton = new javax.swing.JButton();
        ShowMessageTotalButton = new javax.swing.JButton();
        ShowGroupTotalButton = new javax.swing.JButton();
        ShowPositiveButton = new javax.swing.JButton();
        SelectedUser = new javax.swing.JLabel();
        StatisticsSectionLabel = new javax.swing.JLabel();
        UserTreeLabel = new javax.swing.JLabel();
        CreateSectionLabel = new javax.swing.JLabel();
        UserType = new javax.swing.JLabel();
        UserId = new javax.swing.JLabel();
        DisplayName = new javax.swing.JLabel();
        Followers = new javax.swing.JLabel();
        Following = new javax.swing.JLabel();
        Messages = new javax.swing.JLabel();
        PositivePercentage = new javax.swing.JLabel();
        OpenUserViewButton = new javax.swing.JButton();
        CreateUserTypeLabel = new javax.swing.JLabel();
        UserTreeScrollPane = new javax.swing.JScrollPane();
        UserTree = new javax.swing.JTree();
        CreateUserTypeUser = new javax.swing.JRadioButton();
        CreateUserTypeUserGroup = new javax.swing.JRadioButton();
        CreateUserUserIdLabel = new javax.swing.JLabel();
        CreateUserUserId = new javax.swing.JTextField();
        CreateUserButton = new javax.swing.JButton();
        CreateUserDisplayName = new javax.swing.JTextField();
        CreateUserDisplayNameLabel = new javax.swing.JLabel();
        IdVerifyButton = new javax.swing.JButton();
        LastUpdatedButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        StatisticsOutput.setEditable(false);
        StatisticsOutput.setBackground(new java.awt.Color(238, 238, 238));
        StatisticsOutput.setToolTipText("");
        StatisticsOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatisticsOutputActionPerformed(evt);
            }
        });

        ShowUserTotalButton.setText("Show User Total");
        ShowUserTotalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowUserTotalButtonActionPerformed(evt);
            }
        });

        ShowMessageTotalButton.setText("Show Messages Total");
        ShowMessageTotalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowMessageTotalButtonActionPerformed(evt);
            }
        });

        ShowGroupTotalButton.setText("Show Group Total");
        ShowGroupTotalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowGroupTotalButtonActionPerformed(evt);
            }
        });

        ShowPositiveButton.setText("Show Positive Percentage");
        ShowPositiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPositiveButtonActionPerformed(evt);
            }
        });

        SelectedUser.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        SelectedUser.setText("Selected User/Group");

        StatisticsSectionLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        StatisticsSectionLabel.setText("Site Statistics");

        UserTreeLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        UserTreeLabel.setText("User List");

        CreateSectionLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CreateSectionLabel.setText("Create User/Group");

        UserType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UserType.setText("<html><b>Type:</b> User");

        UserId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UserId.setText("<html><b>User ID:</b> 9222866");

        DisplayName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DisplayName.setText("<html><b>Display Name:</b> John Doe");

        Followers.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Followers.setText("<html><b>Followers:</b> 10");

        Following.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Following.setText("<html><b>Following:</b> 20");

        Messages.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Messages.setText("<html><b>Messages:</b> 5");

        PositivePercentage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        PositivePercentage.setText("<html><b>Positive Percentage:</b> 43%");

        OpenUserViewButton.setText("Open User View");
        OpenUserViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenUserViewButtonActionPerformed(evt);
            }
        });

        CreateUserTypeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CreateUserTypeLabel.setText("<html><b>Type</b>");

        UserTree.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        UserTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                UserTreeValueChanged(evt);
            }
        });
        UserTreeScrollPane.setViewportView(UserTree);

        CreateUserTypeButtonGroup.add(CreateUserTypeUser);
        CreateUserTypeUser.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CreateUserTypeUser.setSelected(true);
        CreateUserTypeUser.setText("User");

        CreateUserTypeButtonGroup.add(CreateUserTypeUserGroup);
        CreateUserTypeUserGroup.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CreateUserTypeUserGroup.setText("User Group");

        CreateUserUserIdLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CreateUserUserIdLabel.setText("<html><b>User ID</b>");

        CreateUserUserId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateUserUserIdActionPerformed(evt);
            }
        });

        CreateUserButton.setText("Create User");
        CreateUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateUserButtonActionPerformed(evt);
            }
        });

        CreateUserDisplayName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateUserDisplayNameActionPerformed(evt);
            }
        });

        CreateUserDisplayNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CreateUserDisplayNameLabel.setText("<html><b>Display Name</b>");

        IdVerifyButton.setText("User/Group ID Verification");
        IdVerifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IdVerifyButtonActionPerformed(evt);
            }
        });

        LastUpdatedButton.setText("Last Updated User");
        LastUpdatedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastUpdatedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserTreeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                    .addComponent(UserTreeScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CreateUserTypeLabel)
                        .addComponent(CreateSectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CreateUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(CreateUserTypeUser, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(CreateUserTypeUserGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(ShowMessageTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ShowPositiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(UserType)
                        .addComponent(SelectedUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Following)
                        .addComponent(Messages)
                        .addComponent(PositivePercentage)
                        .addComponent(OpenUserViewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DisplayName)
                        .addComponent(Followers)
                        .addComponent(UserId)
                        .addComponent(StatisticsOutput)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(ShowUserTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ShowGroupTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(StatisticsSectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(CreateUserUserIdLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CreateUserUserId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CreateUserDisplayName, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CreateUserDisplayNameLabel))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(IdVerifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LastUpdatedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CreateUserTypeUser, CreateUserTypeUserGroup});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserTreeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UserType, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DisplayName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Followers, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Following, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Messages, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PositivePercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OpenUserViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CreateSectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CreateUserTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CreateUserTypeUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CreateUserTypeUserGroup))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CreateUserUserIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateUserDisplayNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CreateUserUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateUserDisplayName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CreateUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(StatisticsSectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ShowMessageTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ShowPositiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ShowUserTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ShowGroupTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IdVerifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastUpdatedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StatisticsOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(UserTreeScrollPane))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateUserUserIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateUserUserIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateUserUserIdActionPerformed

    private void CreateUserDisplayNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateUserDisplayNameActionPerformed

    }//GEN-LAST:event_CreateUserDisplayNameActionPerformed

    // Update selected user info
    private void UserTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_UserTreeValueChanged
        UserEntity newSelectedUser = data.getUser(evt.getPath().getLastPathComponent().toString());
        if (newSelectedUser != selectedUser) {
            selectedUser = newSelectedUser;
            UserEntityStatistics stats = selectedUser.getStatistics();

            String followersString = stats.getFollowers() >= 0 ? String.valueOf(stats.getFollowers()) : "-";
            String followingString = stats.getFollowing() >= 0 ? String.valueOf(stats.getFollowing()) : "-";
            String messagesString = stats.getMessages() >= 0 ? String.valueOf(stats.getMessages()) : "-";
            String positivePercentageString = stats.getPositivePercentage() >= 0 ? String.valueOf(Math.round(stats.getPositivePercentage() * 10000.0) / 100.0) + "%" : "-";

            UserType.setText("<html><b>Type: </b>" + stats.getType());
            UserId.setText("<html><b>User ID: </b>" + stats.getId());
            DisplayName.setText("<html><b>Display Name: </b>" + stats.getDisplayName());
            Followers.setText("<html><b>Followers: </b>" + followersString);
            Following.setText("<html><b>Following: </b>" + followingString);
            Messages.setText("<html><b>Messages: </b>" + messagesString);
            PositivePercentage.setText("<html><b>Positive Percentage: </b>" + positivePercentageString);

            OpenUserViewButton.setEnabled(stats.getType().equals("User"));
        }
    }//GEN-LAST:event_UserTreeValueChanged

    // Create a new user/group in the currently selected user group
    private void CreateUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateUserButtonActionPerformed
        if (selectedUser == null) return;
        
        if (CreateUserTypeUser.isSelected()) 
            selectedUser.addUserEntity(new User(CreateUserUserId.getText(), CreateUserDisplayName.getText(), data));
        else 
            selectedUser.addUserEntity(new UserGroup(CreateUserUserId.getText(), CreateUserDisplayName.getText(), data));
        
        updateTree();
    }//GEN-LAST:event_CreateUserButtonActionPerformed

    // Open a new user view for the selected user
    private void OpenUserViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenUserViewButtonActionPerformed
        UserView window = new UserView((User)selectedUser, data);
        window.setVisible(true);
    }//GEN-LAST:event_OpenUserViewButtonActionPerformed

    // Print total number of messages sent to the statistics output
    private void ShowMessageTotalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowMessageTotalButtonActionPerformed
        String output = "There have been " + data.getMessages().size() + " messages sent.";
        StatisticsOutput.setText(output);
    }//GEN-LAST:event_ShowMessageTotalButtonActionPerformed

    // Print total number of users to statistics output
    private void ShowUserTotalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowUserTotalButtonActionPerformed
        int count = 0;
        // Get all user entities, only add regular users to count
        for (UserEntity user : data.getUsers().values()) {
            if (user.getClass().getSimpleName().equals("User")) {
                count++;
            }
        }
        String output = "There are " + count + " total users.";
        StatisticsOutput.setText(output);
    }//GEN-LAST:event_ShowUserTotalButtonActionPerformed

    // Print total number of user groups to statistics output
    private void ShowGroupTotalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowGroupTotalButtonActionPerformed
        int count = 0;
        // Get all user entities, only add groups to count
        for (UserEntity user : data.getUsers().values()) {
            if (user.getClass().getSimpleName().equals("UserGroup")) {
                count++;
            }
        }
        String output = "There are " + count + " total user groups.";
        StatisticsOutput.setText(output);
    }//GEN-LAST:event_ShowGroupTotalButtonActionPerformed

    // Print percentage of positive messages to statistics output
    private void ShowPositiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPositiveButtonActionPerformed
        int count = 0;
        // Index all messages, adding 1 to count when message is positive
        for (Message message : data.getMessages().values()) {
            if (MessageEvaluator.isPositive(message.getContent())) {
                count++;
            }
        }
        
        // Percent is positive / total
        double positivePercent = (double)count / (double)data.getMessages().size();
        // Convert percent, round to 2 decimal places
        positivePercent = Math.round(positivePercent * 10000) / 100;
        
        String output = "Of all messages, " + positivePercent + "% are positive.";
        StatisticsOutput.setText(output);
    }//GEN-LAST:event_ShowPositiveButtonActionPerformed

    private void IdVerifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IdVerifyButtonActionPerformed
        if (IdVerify.isAllValid(data)) {
            StatisticsOutput.setText("All user IDs are valid.");
        }
        else {
            StatisticsOutput.setText("There are invalid user IDs!");
        }
    }//GEN-LAST:event_IdVerifyButtonActionPerformed

    private void LastUpdatedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastUpdatedButtonActionPerformed
        UserEntity lastUpdatedUser = null;
        long highestTime = 0;
        
        for (UserEntity thisUser : data.getUsers().values()) {
            if (thisUser.getLastUpdateTime() > highestTime && thisUser.getClass().getSimpleName().equals("User")) {
                lastUpdatedUser = thisUser;
                highestTime = thisUser.getLastUpdateTime();
            }
        }
        
        if (lastUpdatedUser != null) {
            StatisticsOutput.setText("The last updated user is: " + lastUpdatedUser.getId() + ". Updated at: " + highestTime);
        }
        else {
            StatisticsOutput.setText("There are no valid users!");
        }
    }//GEN-LAST:event_LastUpdatedButtonActionPerformed

    private void StatisticsOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatisticsOutputActionPerformed
    
    }//GEN-LAST:event_StatisticsOutputActionPerformed

    // Update the user tree display
    private void updateTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(data.getRoot().getId());
        Stack<DefaultMutableTreeNode> parents = new Stack();
        parents.push(root);
        
        // Depth-first building of hierarchy
        while (!parents.isEmpty()) {
            DefaultMutableTreeNode parent = parents.pop(); 
            for (UserEntity child : data.getUser(parent.toString()).getChildren()) {
                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(child.getId());
                parents.push(newNode);
                parent.add(newNode);
            }
        }
        
        UserTree.setModel(new DefaultTreeModel(root));
        UserTree.setCellRenderer(new CustomTreeCellRenderer());
    }
    
    // Custom cell renderer ensures all groups are displayed as folders, even when empty
    private class CustomTreeCellRenderer extends DefaultTreeCellRenderer {
        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);

            if (value instanceof DefaultMutableTreeNode node) {
                // Get user from this node's name
                UserEntity userEntityData = data.getUser(node.getUserObject().toString());
                // Get icon from this user's getIcon override
                setIcon(userEntityData.getIcon(expanded));
            }

            return this;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminControlPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CreateSectionLabel;
    private javax.swing.JButton CreateUserButton;
    private javax.swing.JTextField CreateUserDisplayName;
    private javax.swing.JLabel CreateUserDisplayNameLabel;
    private javax.swing.ButtonGroup CreateUserTypeButtonGroup;
    private javax.swing.JLabel CreateUserTypeLabel;
    private javax.swing.JRadioButton CreateUserTypeUser;
    private javax.swing.JRadioButton CreateUserTypeUserGroup;
    private javax.swing.JTextField CreateUserUserId;
    private javax.swing.JLabel CreateUserUserIdLabel;
    private javax.swing.JLabel DisplayName;
    private javax.swing.JLabel Followers;
    private javax.swing.JLabel Following;
    private javax.swing.JButton IdVerifyButton;
    private javax.swing.JButton LastUpdatedButton;
    private javax.swing.JLabel Messages;
    private javax.swing.JButton OpenUserViewButton;
    private javax.swing.JLabel PositivePercentage;
    private javax.swing.JLabel SelectedUser;
    private javax.swing.JButton ShowGroupTotalButton;
    private javax.swing.JButton ShowMessageTotalButton;
    private javax.swing.JButton ShowPositiveButton;
    private javax.swing.JButton ShowUserTotalButton;
    private javax.swing.JTextField StatisticsOutput;
    private javax.swing.JLabel StatisticsSectionLabel;
    private javax.swing.JLabel UserId;
    private javax.swing.JTree UserTree;
    private javax.swing.JLabel UserTreeLabel;
    private javax.swing.JScrollPane UserTreeScrollPane;
    private javax.swing.JLabel UserType;
    // End of variables declaration//GEN-END:variables
}
